import torch.nn as nn
import torch.nn.functional as F

class SRCNN(nn.Module):
    def __init__(self, in_channels):
        super(SRCNN, self).__init__()
        self.conv1 = nn.Conv2d(in_channels, 64, kernel_size=9, padding=4)
        self.conv1_bn = nn.BatchNorm2d(64)
        self.relu1 = nn.ReLU(inplace=True)
        self.residual1 = ResidualBlock(64, 64)
        self.residual2 = ResidualBlock(64, 64)
        self.residual3 = ResidualBlock(64, 64)
        self.conv2 = nn.Conv2d(64, 64, kernel_size=3, padding=1)
        self.conv2_bn = nn.BatchNorm2d(64)
        self.relu2 = nn.ReLU(inplace=True)
        self.conv3 = nn.Conv2d(64, 64, kernel_size=3, padding=1)
        self.conv3_bn = nn.BatchNorm2d(64)
        self.relu3 = nn.ReLU(inplace=True)
        self.conv4 = nn.Conv2d(64, in_channels, kernel_size=9, padding=4)
        
        self.skip_conv1 = nn.Conv2d(in_channels, 64, kernel_size=5, padding=2)
        self.skip_conv2 = nn.Conv2d(64, 64, kernel_size=3, padding=1)
        self.skip_conv3 = nn.Conv2d(64, 64, kernel_size=3, padding=1)
        self.skip_conv4 = nn.Conv2d(64, in_channels, kernel_size=5, padding=2)

    def forward(self, x):
        # Skip connection
        skip = self.skip_conv1(x)
        skip = self.skip_conv2(skip)
        skip = self.skip_conv3(skip)
        skip = self.skip_conv4(skip)

        # Main network
        out = self.conv1(x)
        out = self.conv1_bn(out)
        out = self.relu1(out)
        out = self.residual1(out)
        out = self.residual2(out)
        out = self.residual3(out)
        out = self.conv2(out)
        out = self.conv2_bn(out)
        out = self.relu2(out)
        out = self.conv3(out)
        out = self.conv3_bn(out)
        out = self.relu3(out)
        out = self.conv4(out)

        # Add skip connection
        out += skip

        return out

class ResidualBlock(nn.Module):
    def __init__(self, in_channels, out_channels):
        super(ResidualBlock, self).__init__()
        self.conv1 = nn.Conv2d(in_channels, out_channels, kernel_size=3, padding=1)
        self.conv1_bn = nn.BatchNorm2d(out_channels)
        self.relu1 = nn.ReLU(inplace=True)
        self.conv2 = nn.Conv2d(out_channels, out_channels, kernel_size=3, padding=1)
        self.conv2_bn = nn.BatchNorm2d(out_channels)
        self.relu2 = nn.ReLU(inplace=True)

    def forward(self, x):
        out = self.conv1(x)
        out = self.conv1_bn(out)
        out = self.relu1(out)
        out = self.conv2(out)
        out = self.conv2_bn(out)
        out += x
        out = self.relu2(out)
        return out

